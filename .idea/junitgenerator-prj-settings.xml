<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="JUnitGeneratorProjectSettings">
    <option name="combineGetterAndSetter" value="true" />
    <option name="outputFilePattern" value="${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}" />
    <option name="selectedTemplateKey" value="JUnit 4" />
    <option name="vmTemplates">
      <map>
        <entry key="JUnit 3" value="#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end&#10;#macro (lap $strIn)$strIn.valueOf($strIn.charAt(0)).toLowerCase()$strIn.substring(1)#end&#10;#foreach ($entry in $entryList)&#10;#set( $testClass=&quot;${entry.className}Test&quot;)&#10;  &#10;  &#10;#set($efsList = $entry.packageName.split(&quot;[.]&quot;))&#10;#set($efsMode = $efsList.get(4))&#10;    &#10;package $entry.packageName;&#10; &#10;import com.tesla.framework.core.Context;&#10;import com.tesla.framework.core.Constants;&#10;import com.mskj.common.dto.BaseRequestParam;  &#10;import com.mskj.common.dto.BaseResult;  &#10;import com.tesla.framework.test.function.Parameter;&#10;import com.tesla.framework.test.function.FunctionRule;&#10;import com.tesla.framework.test.function.context.FunctionTestContextLoader;&#10;import org.junit.runner.RunWith;&#10;import org.springframework.test.context.ContextConfiguration;&#10;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&#10;   &#10;import org.junit.*;&#10;   &#10;import com.tesla.framework.function.Function;&#10;   &#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import java.util.Map;&#10;    &#10;/**&#10;*@program:     ${entry.className}Test&#10;*@description: ${entry.className} TestClass&#10;*@author:      mskj-huangbingyi&#10;*@createDate:  ${DATE}&#10;*/&#10;@ContextConfiguration(locations = {&quot;classpath*:META-INF/tesla-${efsMode}.xml&quot;}, loader = FunctionTestContextLoader.class)&#10;@RunWith(SpringJUnit4ClassRunner.class)&#10;public class $testClass {&#10;#foreach($method in $entry.methodList)&#10;    &#10;    @Autowired&#10;    private Function ${method.name};&#10;#end&#10;       &#10;    @Rule&#10;    public FunctionRule functionRule = new FunctionRule();&#10;    private static BaseRequestParam baseParam = new BaseRequestParam();&#10;    @Before&#10;    public void setUp() {&#10;        baseParam.setTenantNo(&quot;&quot;);&#10;        baseParam.setTenantName(&quot;&quot;);&#10;        baseParam.setUserType(&quot;1-NORMAL&quot;);&#10;        baseParam.setUserNo(&quot;&quot;);&#10;        baseParam.setUserName(&quot;&quot;);&#10;    }&#10;#foreach($method in $entry.methodList)&#10;  &#10;    @Test&#10;    public void test#cap(${method.name})() throws Exception {&#10;        Context context = functionRule.createContext(${method.name});&#10;#foreach($string in $method.paramClasses)&#10;#set($arr = $string.split(&quot;[.]&quot;))&#10;#set($len = $arr.size())&#10;#set($i=$len - 1)&#10;#set($obj = $arr.get($i))&#10;#set($index = $velocityCount)&#10;#foreach($param in $method.paramNames)&#10;#if($index==$velocityCount&amp;&amp;$param!=&quot;context&quot;)&#10;#if($obj==&quot;Integer&quot;||$obj==&quot;Long&quot;||$obj==&quot;BigDecimal&quot;||$obj==&quot;int&quot;||$obj==&quot;long&quot;)&#10;        baseParam.setRequestBody(1);&#10;        context.put(&quot;param&quot;, baseParam);&#10;#elseif($obj==&quot;String&quot;)&#10;        baseParam.setRequestBody(&quot;1&quot;);&#10;        context.put(&quot;param&quot;, baseParam);&#10;#elseif($obj==&quot;Boolean&quot;)&#10;        baseParam.setRequestBody(false);&#10;        context.put(&quot;param&quot;, baseParam);&#10;#else&#10;        #set($obj = $obj.replaceAll(&quot;[\\&lt;\\&gt;]&quot;, &quot;&quot;))&#10;        $obj #lap($param) = new $obj();&#10;        baseParam.setRequestBody(#lap($param));&#10;        context.put(&quot;param&quot;, baseParam);&#10;#end&#10;#end&#10;#end&#10;#end&#10;        ${method.name}.execute(context);&#10;        Map&lt;String,Object&gt; result = context.get(Constants.REPLY_KEY, Map.class);&#10;        BaseResult baseResult = (BaseResult) result.get(&quot;result&quot;);&#10;        Assert.assertTrue(baseResult.isSuccess());&#10;    }&#10;#end&#10;}&#10;#end" />
        <entry key="JUnit 4" value="#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end&#10;#macro (lap $strIn)$strIn.valueOf($strIn.charAt(0)).toLowerCase()$strIn.substring(1)#end&#10;#foreach ($entry in $entryList)&#10;#set($testClass=&quot;${entry.className}Test&quot;)&#10;#set($efsClass=$entry.className)&#10;#set($ObjName=$parentClass.replace(&quot;Provider&quot;,&quot;&quot;))&#10;#set($ResObj=&quot;Para${ObjName}Res&quot;)&#10;#set($efsList = $entry.packageName.split(&quot;[.]&quot;))&#10;#set($efsMode = $efsList.get(4))&#10;package $entry.packageName;&#10;import com.mskj.scfp.billbiz.service.$parentClass;&#10;import com.tesla.framework.test.function.context.FunctionTestContextLoader;&#10;import org.junit.Assert;&#10;import org.junit.Before;&#10;import org.junit.Test;&#10;import org.junit.Test;&#10;import org.junit.runner.RunWith;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.test.context.ContextConfiguration;&#10;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&#10;import java.util.Map;&#10;/**&#10;*@program: ${efsClass}Test&#10;*@description: ${efsClass} TestClass&#10;*@author: mskj-huangbingyi&#10;*@createDate: ${DATE}&#10;*/&#10;@ContextConfiguration(locations = {&quot;classpath*:META-INF/tesla-${efsMode}.xml&quot;}, loader = FunctionTestContextLoader.class)&#10;@RunWith(SpringJUnit4ClassRunner.class)&#10;public class $testClass {&#10; &#10;    @Autowired&#10;    private ${efsClass} #lap(${efsClass});&#10; &#10;    private static final Logger logger = LoggerFactory.getLogger(${efsClass}Test.class);&#10; &#10;#foreach($method in $entry.methodList)&#10;    @Test&#10;    public void test#cap(${method.name})() {&#10;#foreach($string in $method.paramClasses)&#10;#set($arr = $string.split(&quot;[.]&quot;))&#10;#set($len = $arr.size())&#10;#set($i=$len - 1)&#10;#set($obj = $arr.get($i))&#10;#set($index = $velocityCount)&#10;#foreach($param in $method.paramNames)&#10;#if($index==$velocityCount&amp;&amp;$param!=&quot;context&quot;)&#10;#if($obj==&quot;Integer&quot;||$obj==&quot;Long&quot;||$obj==&quot;BigDecimal&quot;||$obj==&quot;int&quot;||$obj==&quot;long&quot;)&#10;        $obj #lap($param) = 1;&#10;#elseif($obj==&quot;String&quot;)&#10;        $obj #lap($param) = &quot;1&quot;;&#10;#elseif($obj==&quot;Boolean&quot;)&#10;        $obj #lap($param) = false;&#10;#else&#10;        $obj #lap($param) = new $obj();&#10;#end&#10;#end&#10;#end&#10;#end&#10;        #lap(${efsClass}).${method.name}(&#10;#foreach($param in $method.paramNames)&#10;#set ($psizes =$method.paramNames.size())&#10;#set ($psize =$psizes - 1)&#10;#if($foreach.index == $psize)&#10;            $param&#10;#else&#10;            $param,&#10;#end&#10;#end&#10;        );&#10;    }&#10;#end&#10;}&#10;#end" />
      </map>
    </option>
  </component>
</project>